name: Push on develop - Build, test, create docker images & push them to docker hub

on:
  push:

jobs:

  # ====================================================================================================================
  # Run java tests.
  java_tests:
    name: Java tests
    runs-on: ubuntu-latest
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      - name: build and run tests
        run: |
          mvn clean test
          mvn clean test -P integration

  # ====================================================================================================================
  # Run docker tests.
  docker_tests:
    name: Docker tests
    runs-on: ubuntu-latest
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      - name: Build docker images
        run: |
          mvn clean install -P release -Dmaven.test.skip
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-batch/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-api/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-web/pom.xml

      # ================================================================================================================
      - name: Run the docker-compose with our images
        run: |
          docker-compose up >> docker.logs 2>&1 &
          sleep 60

      # ================================================================================================================
      # Checking request life cycle.
      - name: Adding a request
        id: addProofRequest
        run: |
          requestId=$(curl -H "Content-Type: application/json" \
                -d '{ "query": "mutation { createAddProofRequest(input: {rawProof: \"AAAAAAL9BDwAJBDC6+N2taWDvnmTVLgwr4mGBCuZpHd1LFUnq5CqK1crAAAAAAFQAAAAIGegXtiUZvfVqFzIXM+Ul6Ea0ocKGbVXeRYAAAAAAAAA88V9mnDK6ygsK+wQ7KfCeg/nwff6vxI6hejjG3e3ppSzbuFj//8AHfcJY/QC9wIAAAAAAQEQwuvjdrWlg755k1S4MK+JhgQrmaR3dSxVJ6uQqitXKwAAAAAA/////wLoAwAAAAAAACJRIEl5QgFinncSR5W9teZ0N9pg58KwtxVaxsqFGhe/u9T62wIUAAAAAAAiUSBCgsBJGj0pHAIH5pnVg2aT5RRCO77LppWEcSI74X/5+wJIMEUCIQD6tMoanMEyK7rpP8b2rIx087ZAwe0mVoYpuCxkAamPmwIgENrBagbUcOWF075vtCPOvlI9X57J/fvVE8P4t4czbdkBIQK+k2PkmF3Nwiw95Io50bOKY24IHopAQLzt0o3QBXxMBQAAAAAD/QECCNgtEMDuLNmpqUJZOmpfRiLqFw2aYQ4U5oWH8TweQpeRlrZDEsFy8XAbIOrDi2ZrkZxm7znVvSkgK7S/B2Ta49wxA67ssl5wpx9vdsc61OZNPi3AI0y6gS/q4+rok/ol1ad+s90SwnbVUgkJ47SxCRkj5grGRt1PrFv0Zjf+rJVpmZTmL8MZvk9dChCbc510zh+wdAan3BdudN0AOSrMQctsMb97k0nHtICgrjIRPivXUXdEUNO2SHLoqC9SsypXuDoleqRtyL1uga66yfapcEgOHBYhAKQShxShweEXXQsVb+Ok1B+O7rVz6Nqn2gbg3doES/fH/i/4zxHLLAbHZVTnBPAAAQABTxDC6+N2taWDvnmTVLgwr4mGBCuZpHd1LFUnq5CqK1crAAAAABBoYWJpYnRhcm9fcmVtb3RlFGhhYmlidGFyby5jb21fcmVtb3RlAAAAAAACAQADBf4BQG9ABmkBZwBlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAgAACSECA+AboGxeZjf10S0GaTD2D9iVIjqlz4EM++c0+e6OeHoFnwAEAAAAAAEhA30ykpyTT6FlRxaNVkG5o8GTpDZs/evCPmYMwsU4TEbsAnQASQABAAEgPgVFMqaoaedeG96KJeeUQXfWSKA0/lwUirf3dDU4zJ4CIgAA//////////////////////////////////////////8BJwABAAEiAAD//////////////////////////////////////////wYwAS4ABAAAAAEBIQLcSHLzaT/lCeYzvSz09KG7cDGpf10FayQj1Nabl6rTHwMDAgEBvBHvQ38qh6p5zALFW2Tb5hlkomhRe2JrsW+JXDHjKTv9B6MAJItUvaRjib4LIAdu+JHZhfKL09chEbykNqv8Wtf4ZjuFAAAAAAFQAABgIKp/g5866TLs7shSVp67lnMLTGj5SrWe6RQAAAAAAAAAfYgH/VE/hEuIsQEzMW3sPtBF6wySS/DXEfxSoQJXzTGljOFjQV0iGT8vm9wC/QFjAgAAAAABAotUvaRjib4LIAdu+JHZhfKL09chEbykNqv8Wtf4ZjuFAQAAAAD/////i1S9pGOJvgsgB274kdmF8ovT1yERvKQ2q/xa1/hmO4UAAAAAAAAAAAAD6AMAAAAAAAAiUSA9IQPuVFvpjbeV1z4R/YY0s8C9ddkTNAJSC2HoHyHIregDAAAAAAAAIlEgUai+/8Zd3X7xelRG7HWkqk+aWMERe8R0VTxvNBXKbCY+zRMAAAAAACJRINqgGvK1f1IpAc/1nKQ2DiPaSkHWu0qknqmPtn2NIRvHAUBlGhmFAycyVnnN7vFCI4h26fRS3xbQDzqwVtbUudst1Zxiv/5WsajTzq/0QGcbyJCoG/eL7/obfCqbl+idWInBAUDzUTcJn5wvzDEoP7vkiVTKu4LKMPRyi800488/ygMl6nsKKgmnizlM+0cky4CPYcdWt8aXt4qE/Wl9O+8jENqqAAAAAAPiB4WGOIm06NBFx7jkGoxP2hfVp/npBoT99oeOOr2DShfGjGvX13J3mw9bMkLPbe4lHetJ/pwnnY1t+ZTD9Z3Fp8LS8WQioOgFhuZMDFFVpkAUJ3sWLX/PNArkawLbYitBfXNJBaHOgK9Ydt4lPyWl+ggcdZv6HPoPcWZEfo7MkGLbaepIee3Lt90lJLxKLD50EwXkjvtE5AcLHTc+v4RNw3aBE4FYQhF1lPIpqaKkJ2C2i+l6UJTqXIFZByqnfgVWtKm7KIaL5WUd0hxpJoA2dyJkJP04S8N3wKBxMRuWgTr7dAT9AqAAAQABTxDC6+N2taWDvnmTVLgwr4mGBCuZpHd1LFUnq5CqK1crAAAAABBoYWJpYnRhcm9fcmVtb3RlFGhhYmlidGFyby5jb21fcmVtb3RlAAAAAAACAQADAQoG/QIbAf0CFwBlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/QGsSgAB5NRF1CXSOcmsCA7ruti701k17esd4DkHknGTvKlyybkAAAAAAUBvNv////////////////////////////////////////9//QFeAAEAAU8QwuvjdrWlg755k1S4MK+JhgQrmaR3dSxVJ6uQqitXKwAAAAAQaGFiaWJ0YXJvX3JlbW90ZRRoYWJpYnRhcm8uY29tX3JlbW90ZQAAAAAAAgEAAwX+AUBvNgatAasAZYtUvaRjib4LIAdu+JHZhfKL09chEbykNqv8Wtf4ZjuFAAAAAD4FRTKmqGnnXhveiiXnlEF31kigNP5cFIq393Q1OMyeAgPgG6BsXmY39dEtBmkw9g/YlSI6pc+BDPvnNPnujnh6AUIBQOcBOWi0inzLOOcRrYChn+G4JyWe9eJlO6s4pYa9PKXiSs9jhJn507nvN3D3am3rGN8L59gXo5Whx5noCeHzct8HKMbUVMC2KVHdr5Jiz2Vteqtd2BzaNSwvi8Lns2tfwA/RAAAAAAFAb0AIAgAACSECV+BOR3G04Fq5J3zkatO6g72pRZit4NNLYohjWD1wyyMIAgAACSECj1cBE6L59z9epRdOVwJVSLvamNAyPwX1tWvm++NAxO4FnwAEAAAAAQEhA+riUffgTwRYogPwsYZf9qSPZu7VB09YbeMsTCO0eWIkAnQASQABAAEgPgVFMqaoaedeG96KJeeUQXfWSKA0/lwUirf3dDU4zJ4CIgAA//////////////////////////////////////////8BJwABAAEiAAD//////////////////////////////////////////wb4AscABAAAAAABIQJ6GjV81gvs1dD4gom7Br/bN320g9vfVd4cOArP+8KYbgKcAHEAAQABID4FRTKmqGnnXhveiiXnlEF31kigNP5cFIq393Q1OMyeAkoAAQik60qmGCuF2rjsQQM4XPAulUxC/2fwPMvHLDeu2Y6IAAAAAAFAbzb/////////////////////////////////////////3wEnAAEAASIAAP//////////////////////////////////////////LgAEAAAAAgEhAhsLhWslxtgqGnR7DWI87F8C/47W24vggHC6nqnBr2NsAwMCAQEHnwAEAAAAAAEhAnoaNXzWC+zV0PiCibsGv9s3fbSD299V3hw4Cs/7wphuAnQASQABAAEgPgVFMqaoaedeG96KJeeUQXfWSKA0/lwUirf3dDU4zJ4CIgAA//////////////////////////////////////////8BJwABAAEiAAD//////////////////////////////////////////6NumG4nl1ZBFr46o4uvgs0ocbYbB1NTHzX7mTrGcqqx\"}) { requestId }}" }' \
                http://localhost:9090/graphql | jq -r '.data.createAddProofRequest.requestId')
          echo "requestId=${requestId}" >> $GITHUB_OUTPUT

      - name: Retrieving request status
        id: requestByRequestId
        run: |
          sleep 60
          status=$(curl -H "Content-Type: application/json" \
              -d '{ "query": "{ requestByRequestId(requestId: \"${{ steps.addProofRequest.outputs.requestId }}\") { status }}" }' \
              http://localhost:9090/graphql | jq -r '.data.requestByRequestId.status')
          echo "status=${status}" >> $GITHUB_OUTPUT

      - name: Check if the request has been treated
        if: ${{ steps.requestByRequestId.outputs.status != 'SUCCESS' }}
        run: |
          echo "Error - request status is ${{ steps.requestByRequestId.outputs.status }}"
          cat docker.logs
          exit 1

      - name: Retrieving the asset created by the request
        id: assetByAssetId
        run: |
          genesisBootstrapInformation=$(curl -H "Content-Type: application/json" \
              -d '{ "query": "{ assetByAssetId(assetId: \"PgVFMqaoaedeG96KJeeUQXfWSKA0/lwUirf3dDU4zJ4=\") { genesisBootstrapInformation }}" }' \
              http://localhost:9090/graphql | jq -r '.data.assetByAssetId.genesisBootstrapInformation')
          echo "genesisBootstrapInformation=${genesisBootstrapInformation}" >> $GITHUB_OUTPUT

      - name: Check if the asset has been created
        if: ${{ steps.assetByAssetId.outputs.genesisBootstrapInformation != 'EMLr43a1pYO+eZNUuDCviYYEK5mkd3UsVSerkKorVysAAAAAEGhhYmlidGFyb19yZW1vdGUUaGFiaWJ0YXJvLmNvbV9yZW1vdGUAAAAAAA==' }}
        run: |
          echo "Error - Asset not found ${{ steps.requestByRequestId.outputs.genesisBootstrapInformation }}"
          cat docker.logs
          exit 1

  # ====================================================================================================================
  # Run code analysis.
  code_analysis:
    name: Code analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.ref == 'refs/heads/development'
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      # Using CodeQL.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java

      - name: Build and package
        run: |
          mvn package -Dgpg.skip -Dmaven.test.skip=true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # ================================================================================================================
      # Using Qodana.
      - name: Qodana Scan
        uses: JetBrains/qodana-action@v2023.1.0
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

  # ====================================================================================================================
  # Docker images push to docker hub.
  docker_hub_push:
    name: Docker images push to docker hub
    runs-on: ubuntu-latest
    needs: [ java_tests, docker_tests ]
    if: github.ref == 'refs/heads/development'
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      - name: Build docker images
        run: |
          mvn clean install -P release -Dmaven.test.skip
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-batch/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-api/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-web/pom.xml

      # ================================================================================================================
      - name: Docker Hub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.EXPLORER_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.EXPLORER_DOCKER_HUB_PASSWORD }}

      # ================================================================================================================
      - name: Push docker images to Docker hub
        run: |
          docker push royllo/explorer-batch:latest
          docker push royllo/explorer-api:latest
          docker push royllo/explorer-web:latest

  # ====================================================================================================================
  # Docker images push to production.
  production_push:
    name: Docker images push to production
    runs-on: ubuntu-latest
    needs: [ java_tests, docker_tests ]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      - name: Build docker images
        run: |
          mvn clean install -P release -Dmaven.test.skip
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-batch/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-api/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-web/pom.xml

      # ================================================================================================================
      - name: Get release number
        id: release
        run: echo "version=$(mvn help:evaluate -D expression=project.version -q -D forceStdout)" >> $GITHUB_OUTPUT

      # ================================================================================================================
      # Publish to Docker Hub.
      - name: Docker Hub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.EXPLORER_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.EXPLORER_DOCKER_HUB_PASSWORD }}

      # ================================================================================================================
      - name: Tag docker images
        run: |
          docker tag royllo/explorer-batch:latest royllo/explorer-batch:${{ steps.release.outputs.version }}
          docker tag royllo/explorer-api:latest royllo/explorer-api:${{ steps.release.outputs.version }}
          docker tag royllo/explorer-web:latest royllo/explorer-web:${{ steps.release.outputs.version }}

      # ================================================================================================================
      - name: Push tagged images to Docker hub
        run: |
          docker push royllo/explorer-batch:${{ steps.release.outputs.version }}
          docker push royllo/explorer-api:${{ steps.release.outputs.version }}
          docker push royllo/explorer-web:${{ steps.release.outputs.version }}

      # ================================================================================================================
      # Push to DigitalOcean Container Registry.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Tag docker images
        run: |
          docker tag royllo/explorer-batch:latest registry.digitalocean.com/royllo/explorer-batch:production
          docker tag royllo/explorer-api:latest registry.digitalocean.com/royllo/explorer-api:production
          docker tag royllo/explorer-web:latest registry.digitalocean.com/royllo/explorer-web:production

      - name: Push production images to DigitalOcean Container Registry
        run: |
          doctl registry login          
          docker push registry.digitalocean.com/royllo/explorer-batch:production
          docker push registry.digitalocean.com/royllo/explorer-api:production
          docker push registry.digitalocean.com/royllo/explorer-web:production